/**
 * 【这种思路有问题】
 * 
 * 先取最大变量字节，然后一个变量接一个变量填空，不能填就另起一行
 * |     double     |
 * |short|int|char| |
 * 
 * 那么A的大小应该是16才对。
 * 
 * 【真正的思路：前补】
 * 
 * 原则有3条（楼上已经说了），讲一下自己的理解：
1. 结构体变量的首地址，必须是内部最宽数据类型的倍数（取最宽）
2. 按顺序一个变量一个变量看，要求current变量的首地址，必须是自己大小的倍数。（注意，倍数要求）
3. 到了最后一个变量，要求整个结构体的大小的最宽数据类型的倍数。（成为一个方块）

double a   （8个字节）                                8
short b     (2个字节，起始地址8是2的倍数，不补)        8+2
int  c      (4个字节，8+2不是4的倍数，补2个 )         8+2+2（补）+4
char d      (1个字节，8+2+2+4是1的倍数，不补)         8+2+2（补）+4 +1
最后补7个字节，让整体大小为8的倍数      8+2+2(补)+4+1+7（补） =24

········
··==····
·=======
 */

#include <stdio.h>
int main()
{
    struct A{
        double a;
        short b;
        int c;
        char d;
    };
    printf("%d", sizeof(A));
    // 24
    return 0;
}