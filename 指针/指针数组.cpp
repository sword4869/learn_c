/**
 * `[]`的优先级高于`*`，先看低优先级再看高优先级就是名字。
 * 指针数组`int *p[8];`，后结合指针，先结合数组。
 * 数组指针`int (*q)[8];`，后结合数组，先结合指针。
 *
 *
 * 指针数组：`int *p[8];`
 * 指针的数组，该数组中每个元素是一个指针
 * `[]`先与s结合成为一个数组，再由`int*`数组元素类型。
 *
 * 数组指针：`int (*q)[8];`
 * 数组的指针，该指针指一个数组
 * `*`先与s结合成为一个指针，再由`int[]`指针的指向。
 */

#include <stdio.h>

void func(double (*a)[3])
{
    for (int i = 0; i < 3; i++)
        printf("%lf ", *(*a) + i);
}
int main()
{
    // 数组指针，注意是`&a`，而不是`a`
    double a[3] = {3, 4, 5};
    printf("%d %d\n", a, &a);   // a和&a的地址虽然一样，但`&a`是让数组指针的每个指针指向数组a的各个元素
    
    double (*b)[3] = &a;        // 数组指针b的3必须和数组a一样是3。
    for (int i = 0; i < 3; i++)
        printf("%d ", *(b+i));  // 增加的是数组大小，3*double 8 =24
    printf("\n");
    
    for (int i = 0; i < 3; i++)
        printf("%d ", *b+i);    // 增加的是数组元素的大小，double 8
    printf("\n");

    func(&a);               
    return 0;
}
/**
6422000 6422000
6422000 6422024 6422048
6422000 6422008 6422016
3.000000 4.000000 5.000000
 */ 